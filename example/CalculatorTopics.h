// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * @file CalculatorTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_CALCULATORTOPICS_H_
#define _FAST_DDS_GENERATED_CALCULATORTOPICS_H_

#include <protocols/dds/MessageHeader.h>

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CalculatorTopics_SOURCE)
#define CalculatorTopics_DllAPI __declspec( dllexport )
#else
#define CalculatorTopics_DllAPI __declspec( dllimport )
#endif // CalculatorTopics_SOURCE
#else
#define CalculatorTopics_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CalculatorTopics_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*
 * @brief This class represents the structure Calculator_addition_In defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_addition_In
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_addition_In();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_addition_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_addition_In that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_In(
            const Calculator_addition_In& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_addition_In that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_In(
            Calculator_addition_In&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition_In that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_In& operator =(
            const Calculator_addition_In& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_addition_In that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_In& operator =(
            Calculator_addition_In&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_addition_In object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_addition_In& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_addition_In object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_addition_In& x) const;

    /*
     * @brief This function sets a value in member value1
     * @param _value1 New value for member value1
     */
    eProsima_user_DllExport void value1(
            int32_t _value1);

    /*
     * @brief This function returns the value of member value1
     * @return Value of member value1
     */
    eProsima_user_DllExport int32_t value1() const;

    /*
     * @brief This function returns a reference to member value1
     * @return Reference to member value1
     */
    eProsima_user_DllExport int32_t& value1();

    /*
     * @brief This function sets a value in member value2
     * @param _value2 New value for member value2
     */
    eProsima_user_DllExport void value2(
            int32_t _value2);

    /*
     * @brief This function returns the value of member value2
     * @return Value of member value2
     */
    eProsima_user_DllExport int32_t value2() const;

    /*
     * @brief This function returns a reference to member value2
     * @return Reference to member value2
     */
    eProsima_user_DllExport int32_t& value2();


    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_addition_In& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_value1;
    int32_t m_value2;
};
/*
 * @brief This class represents the structure Calculator_subtraction_In defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_subtraction_In
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_subtraction_In();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_subtraction_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtraction_In that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_In(
            const Calculator_subtraction_In& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtraction_In that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_In(
            Calculator_subtraction_In&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction_In that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_In& operator =(
            const Calculator_subtraction_In& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_subtraction_In that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_In& operator =(
            Calculator_subtraction_In&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_subtraction_In object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_subtraction_In& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_subtraction_In object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_subtraction_In& x) const;

    /*
     * @brief This function sets a value in member value1
     * @param _value1 New value for member value1
     */
    eProsima_user_DllExport void value1(
            int32_t _value1);

    /*
     * @brief This function returns the value of member value1
     * @return Value of member value1
     */
    eProsima_user_DllExport int32_t value1() const;

    /*
     * @brief This function returns a reference to member value1
     * @return Reference to member value1
     */
    eProsima_user_DllExport int32_t& value1();

    /*
     * @brief This function sets a value in member value2
     * @param _value2 New value for member value2
     */
    eProsima_user_DllExport void value2(
            int32_t _value2);

    /*
     * @brief This function returns the value of member value2
     * @return Value of member value2
     */
    eProsima_user_DllExport int32_t value2() const;

    /*
     * @brief This function returns a reference to member value2
     * @return Reference to member value2
     */
    eProsima_user_DllExport int32_t& value2();


    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_subtraction_In& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_value1;
    int32_t m_value2;
};
/*
 * @brief This class represents the structure Calculator_addition_Out defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_addition_Out
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_addition_Out();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_addition_Out();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_addition_Out that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_Out(
            const Calculator_addition_Out& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_addition_Out that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_Out(
            Calculator_addition_Out&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition_Out that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_Out& operator =(
            const Calculator_addition_Out& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_addition_Out that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_Out& operator =(
            Calculator_addition_Out&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_addition_Out object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_addition_Out& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_addition_Out object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_addition_Out& x) const;

    /*
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    eProsima_user_DllExport void return_(
            int32_t _return_);

    /*
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    eProsima_user_DllExport int32_t return_() const;

    /*
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    eProsima_user_DllExport int32_t& return_();


    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_addition_Out& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_return_;
};
/*
 * @brief This class represents the structure Calculator_subtraction_Out defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_subtraction_Out
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_subtraction_Out();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_subtraction_Out();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtraction_Out that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_Out(
            const Calculator_subtraction_Out& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtraction_Out that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_Out(
            Calculator_subtraction_Out&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction_Out that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_Out& operator =(
            const Calculator_subtraction_Out& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_subtraction_Out that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_Out& operator =(
            Calculator_subtraction_Out&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_subtraction_Out object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_subtraction_Out& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_subtraction_Out object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_subtraction_Out& x) const;

    /*
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    eProsima_user_DllExport void return_(
            int32_t _return_);

    /*
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    eProsima_user_DllExport int32_t return_() const;

    /*
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    eProsima_user_DllExport int32_t& return_();


    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_subtraction_Out& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_return_;
};
/*
 * @brief This class represents the union Calculator_addition_Result defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_addition_Result
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_addition_Result();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_addition_Result();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_addition_Result that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_Result(
            const Calculator_addition_Result& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_addition_Result that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_Result(
            Calculator_addition_Result&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition_Result that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_Result& operator =(
            const Calculator_addition_Result& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_addition_Result that will be copied.
     */
    eProsima_user_DllExport Calculator_addition_Result& operator =(
            Calculator_addition_Result&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_addition_Result object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_addition_Result& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_addition_Result object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_addition_Result& x) const;

    /*
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    eProsima_user_DllExport void result(
            const Calculator_addition_Out& _result);

    /*
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    eProsima_user_DllExport void result(
            Calculator_addition_Out&& _result);

    /*
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Calculator_addition_Out& result() const;

    /*
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Calculator_addition_Out& result();

    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_addition_Result& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




private:

    int32_t m__d;

    Calculator_addition_Out m_result;
};
/*
 * @brief This class represents the union Calculator_subtraction_Result defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_subtraction_Result
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_subtraction_Result();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_subtraction_Result();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtraction_Result that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_Result(
            const Calculator_subtraction_Result& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtraction_Result that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_Result(
            Calculator_subtraction_Result&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction_Result that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_Result& operator =(
            const Calculator_subtraction_Result& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_subtraction_Result that will be copied.
     */
    eProsima_user_DllExport Calculator_subtraction_Result& operator =(
            Calculator_subtraction_Result&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_subtraction_Result object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_subtraction_Result& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_subtraction_Result object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_subtraction_Result& x) const;

    /*
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    eProsima_user_DllExport void result(
            const Calculator_subtraction_Out& _result);

    /*
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    eProsima_user_DllExport void result(
            Calculator_subtraction_Out&& _result);

    /*
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Calculator_subtraction_Out& result() const;

    /*
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Calculator_subtraction_Out& result();

    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_subtraction_Result& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




private:

    int32_t m__d;

    Calculator_subtraction_Out m_result;
};
/*
 * @brief This class represents the union Calculator_Call defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_Call
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_Call();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_Call();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_Call that will be copied.
     */
    eProsima_user_DllExport Calculator_Call(
            const Calculator_Call& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_Call that will be copied.
     */
    eProsima_user_DllExport Calculator_Call(
            Calculator_Call&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_Call that will be copied.
     */
    eProsima_user_DllExport Calculator_Call& operator =(
            const Calculator_Call& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_Call that will be copied.
     */
    eProsima_user_DllExport Calculator_Call& operator =(
            Calculator_Call&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_Call object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_Call& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_Call object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_Call& x) const;

    /*
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*
     * @brief This function copies the value in member addition
     * @param _addition New value to be copied in member addition
     */
    eProsima_user_DllExport void addition(
            const Calculator_addition_In& _addition);

    /*
     * @brief This function moves the value in member addition
     * @param _addition New value to be moved in member addition
     */
    eProsima_user_DllExport void addition(
            Calculator_addition_In&& _addition);

    /*
     * @brief This function returns a constant reference to member addition
     * @return Constant reference to member addition
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Calculator_addition_In& addition() const;

    /*
     * @brief This function returns a reference to member addition
     * @return Reference to member addition
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Calculator_addition_In& addition();
    /*
     * @brief This function copies the value in member subtraction
     * @param _subtraction New value to be copied in member subtraction
     */
    eProsima_user_DllExport void subtraction(
            const Calculator_subtraction_In& _subtraction);

    /*
     * @brief This function moves the value in member subtraction
     * @param _subtraction New value to be moved in member subtraction
     */
    eProsima_user_DllExport void subtraction(
            Calculator_subtraction_In&& _subtraction);

    /*
     * @brief This function returns a constant reference to member subtraction
     * @return Constant reference to member subtraction
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Calculator_subtraction_In& subtraction() const;

    /*
     * @brief This function returns a reference to member subtraction
     * @return Reference to member subtraction
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Calculator_subtraction_In& subtraction();

    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_Call& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




private:

    int32_t m__d;

    Calculator_addition_In m_addition;
    Calculator_subtraction_In m_subtraction;
};
/*
 * @brief This class represents the structure Calculator_Request defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_Request
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_Request();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_Request();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_Request that will be copied.
     */
    eProsima_user_DllExport Calculator_Request(
            const Calculator_Request& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_Request that will be copied.
     */
    eProsima_user_DllExport Calculator_Request(
            Calculator_Request&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_Request that will be copied.
     */
    eProsima_user_DllExport Calculator_Request& operator =(
            const Calculator_Request& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_Request that will be copied.
     */
    eProsima_user_DllExport Calculator_Request& operator =(
            Calculator_Request&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_Request object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_Request& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_Request object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_Request& x) const;

    /*
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const eprosima::rpc::protocol::RequestHeader& _header);

    /*
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            eprosima::rpc::protocol::RequestHeader&& _header);

    /*
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const eprosima::rpc::protocol::RequestHeader& header() const;

    /*
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport eprosima::rpc::protocol::RequestHeader& header();
    /*
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const Calculator_Call& _data);

    /*
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            Calculator_Call&& _data);

    /*
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const Calculator_Call& data() const;

    /*
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport Calculator_Call& data();

    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_Request& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    eprosima::rpc::protocol::RequestHeader m_header;
    Calculator_Call m_data;
};
/*
 * @brief This class represents the union Calculator_Return defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_Return
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_Return();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_Return();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_Return that will be copied.
     */
    eProsima_user_DllExport Calculator_Return(
            const Calculator_Return& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_Return that will be copied.
     */
    eProsima_user_DllExport Calculator_Return(
            Calculator_Return&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_Return that will be copied.
     */
    eProsima_user_DllExport Calculator_Return& operator =(
            const Calculator_Return& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_Return that will be copied.
     */
    eProsima_user_DllExport Calculator_Return& operator =(
            Calculator_Return&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_Return object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_Return& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_Return object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_Return& x) const;

    /*
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*
     * @brief This function copies the value in member addition
     * @param _addition New value to be copied in member addition
     */
    eProsima_user_DllExport void addition(
            const Calculator_addition_Result& _addition);

    /*
     * @brief This function moves the value in member addition
     * @param _addition New value to be moved in member addition
     */
    eProsima_user_DllExport void addition(
            Calculator_addition_Result&& _addition);

    /*
     * @brief This function returns a constant reference to member addition
     * @return Constant reference to member addition
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Calculator_addition_Result& addition() const;

    /*
     * @brief This function returns a reference to member addition
     * @return Reference to member addition
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Calculator_addition_Result& addition();
    /*
     * @brief This function copies the value in member subtraction
     * @param _subtraction New value to be copied in member subtraction
     */
    eProsima_user_DllExport void subtraction(
            const Calculator_subtraction_Result& _subtraction);

    /*
     * @brief This function moves the value in member subtraction
     * @param _subtraction New value to be moved in member subtraction
     */
    eProsima_user_DllExport void subtraction(
            Calculator_subtraction_Result&& _subtraction);

    /*
     * @brief This function returns a constant reference to member subtraction
     * @return Constant reference to member subtraction
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Calculator_subtraction_Result& subtraction() const;

    /*
     * @brief This function returns a reference to member subtraction
     * @return Reference to member subtraction
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Calculator_subtraction_Result& subtraction();
    /*
     * @brief This function sets a value in member unknownOp
     * @param _unknownOp New value for member unknownOp
     */
    eProsima_user_DllExport void unknownOp(
            eprosima::rpc::protocol::UnknownOperation _unknownOp);

    /*
     * @brief This function returns the value of member unknownOp
     * @return Value of member unknownOp
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport eprosima::rpc::protocol::UnknownOperation unknownOp() const;

    /*
     * @brief This function returns a reference to member unknownOp
     * @return Reference to member unknownOp
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport eprosima::rpc::protocol::UnknownOperation& unknownOp();


    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_Return& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




private:

    int32_t m__d;

    Calculator_addition_Result m_addition;
    Calculator_subtraction_Result m_subtraction;
    eprosima::rpc::protocol::UnknownOperation m_unknownOp;
};
/*
 * @brief This class represents the structure Calculator_Reply defined by the user in the IDL file.
 * @ingroup CALCULATORTOPICS
 */
class Calculator_Reply
{
public:

    /*
     * @brief Default constructor.
     */
    eProsima_user_DllExport Calculator_Reply();

    /*
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Calculator_Reply();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_Reply that will be copied.
     */
    eProsima_user_DllExport Calculator_Reply(
            const Calculator_Reply& x);

    /*
     * @brief Move constructor.
     * @param x Reference to the object Calculator_Reply that will be copied.
     */
    eProsima_user_DllExport Calculator_Reply(
            Calculator_Reply&& x);

    /*
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_Reply that will be copied.
     */
    eProsima_user_DllExport Calculator_Reply& operator =(
            const Calculator_Reply& x);

    /*
     * @brief Move assignment.
     * @param x Reference to the object Calculator_Reply that will be copied.
     */
    eProsima_user_DllExport Calculator_Reply& operator =(
            Calculator_Reply&& x);

    /*
     * @brief Comparison operator.
     * @param x Calculator_Reply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Calculator_Reply& x) const;

    /*
     * @brief Comparison operator.
     * @param x Calculator_Reply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Calculator_Reply& x) const;

    /*
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const eprosima::rpc::protocol::ReplyHeader& _header);

    /*
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            eprosima::rpc::protocol::ReplyHeader&& _header);

    /*
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const eprosima::rpc::protocol::ReplyHeader& header() const;

    /*
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport eprosima::rpc::protocol::ReplyHeader& header();
    /*
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const Calculator_Return& _data);

    /*
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            Calculator_Return&& _data);

    /*
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const Calculator_Return& data() const;

    /*
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport Calculator_Return& data();

    /*
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Calculator_Reply& data,
            size_t current_alignment = 0);


    /*
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    eprosima::rpc::protocol::ReplyHeader m_header;
    Calculator_Return m_data;
};

#endif // _FAST_DDS_GENERATED_CALCULATORTOPICS_H_