// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * @file CalculatorTopics.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CalculatorTopics.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Calculator_addition_In::Calculator_addition_In()
{
    // m_value1 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@58fdd99
    m_value1 = 0;
    // m_value2 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@70b0b186
    m_value2 = 0;

}

Calculator_addition_In::~Calculator_addition_In()
{


}

Calculator_addition_In::Calculator_addition_In(
        const Calculator_addition_In& x)
{
    m_value1 = x.m_value1;
    m_value2 = x.m_value2;
}

Calculator_addition_In::Calculator_addition_In(
        Calculator_addition_In&& x)
{
    m_value1 = x.m_value1;
    m_value2 = x.m_value2;
}

Calculator_addition_In& Calculator_addition_In::operator =(
        const Calculator_addition_In& x)
{

    m_value1 = x.m_value1;
    m_value2 = x.m_value2;

    return *this;
}

Calculator_addition_In& Calculator_addition_In::operator =(
        Calculator_addition_In&& x)
{

    m_value1 = x.m_value1;
    m_value2 = x.m_value2;

    return *this;
}

bool Calculator_addition_In::operator ==(
        const Calculator_addition_In& x) const
{

    return (m_value1 == x.m_value1 && m_value2 == x.m_value2);
}

bool Calculator_addition_In::operator !=(
        const Calculator_addition_In& x) const
{
    return !(*this == x);
}

size_t Calculator_addition_In::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Calculator_addition_In::getCdrSerializedSize(
        const Calculator_addition_In& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Calculator_addition_In::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_value1;
    scdr << m_value2;

}

void Calculator_addition_In::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_value1;
    dcdr >> m_value2;
}

/*
 * @brief This function sets a value in member value1
 * @param _value1 New value for member value1
 */
void Calculator_addition_In::value1(
        int32_t _value1)
{
    m_value1 = _value1;
}

/*
 * @brief This function returns the value of member value1
 * @return Value of member value1
 */
int32_t Calculator_addition_In::value1() const
{
    return m_value1;
}

/*
 * @brief This function returns a reference to member value1
 * @return Reference to member value1
 */
int32_t& Calculator_addition_In::value1()
{
    return m_value1;
}

/*
 * @brief This function sets a value in member value2
 * @param _value2 New value for member value2
 */
void Calculator_addition_In::value2(
        int32_t _value2)
{
    m_value2 = _value2;
}

/*
 * @brief This function returns the value of member value2
 * @return Value of member value2
 */
int32_t Calculator_addition_In::value2() const
{
    return m_value2;
}

/*
 * @brief This function returns a reference to member value2
 * @return Reference to member value2
 */
int32_t& Calculator_addition_In::value2()
{
    return m_value2;
}


size_t Calculator_addition_In::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Calculator_addition_In::isKeyDefined()
{
    return false;
}

void Calculator_addition_In::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

Calculator_subtraction_In::Calculator_subtraction_In()
{
    // m_value1 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f0f2775
    m_value1 = 0;
    // m_value2 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5a4aa2f2
    m_value2 = 0;

}

Calculator_subtraction_In::~Calculator_subtraction_In()
{


}

Calculator_subtraction_In::Calculator_subtraction_In(
        const Calculator_subtraction_In& x)
{
    m_value1 = x.m_value1;
    m_value2 = x.m_value2;
}

Calculator_subtraction_In::Calculator_subtraction_In(
        Calculator_subtraction_In&& x)
{
    m_value1 = x.m_value1;
    m_value2 = x.m_value2;
}

Calculator_subtraction_In& Calculator_subtraction_In::operator =(
        const Calculator_subtraction_In& x)
{

    m_value1 = x.m_value1;
    m_value2 = x.m_value2;

    return *this;
}

Calculator_subtraction_In& Calculator_subtraction_In::operator =(
        Calculator_subtraction_In&& x)
{

    m_value1 = x.m_value1;
    m_value2 = x.m_value2;

    return *this;
}

bool Calculator_subtraction_In::operator ==(
        const Calculator_subtraction_In& x) const
{

    return (m_value1 == x.m_value1 && m_value2 == x.m_value2);
}

bool Calculator_subtraction_In::operator !=(
        const Calculator_subtraction_In& x) const
{
    return !(*this == x);
}

size_t Calculator_subtraction_In::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Calculator_subtraction_In::getCdrSerializedSize(
        const Calculator_subtraction_In& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Calculator_subtraction_In::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_value1;
    scdr << m_value2;

}

void Calculator_subtraction_In::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_value1;
    dcdr >> m_value2;
}

/*
 * @brief This function sets a value in member value1
 * @param _value1 New value for member value1
 */
void Calculator_subtraction_In::value1(
        int32_t _value1)
{
    m_value1 = _value1;
}

/*
 * @brief This function returns the value of member value1
 * @return Value of member value1
 */
int32_t Calculator_subtraction_In::value1() const
{
    return m_value1;
}

/*
 * @brief This function returns a reference to member value1
 * @return Reference to member value1
 */
int32_t& Calculator_subtraction_In::value1()
{
    return m_value1;
}

/*
 * @brief This function sets a value in member value2
 * @param _value2 New value for member value2
 */
void Calculator_subtraction_In::value2(
        int32_t _value2)
{
    m_value2 = _value2;
}

/*
 * @brief This function returns the value of member value2
 * @return Value of member value2
 */
int32_t Calculator_subtraction_In::value2() const
{
    return m_value2;
}

/*
 * @brief This function returns a reference to member value2
 * @return Reference to member value2
 */
int32_t& Calculator_subtraction_In::value2()
{
    return m_value2;
}


size_t Calculator_subtraction_In::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Calculator_subtraction_In::isKeyDefined()
{
    return false;
}

void Calculator_subtraction_In::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

Calculator_addition_Out::Calculator_addition_Out()
{
    // m_return_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@279ad2e3
    m_return_ = 0;

}

Calculator_addition_Out::~Calculator_addition_Out()
{
}

Calculator_addition_Out::Calculator_addition_Out(
        const Calculator_addition_Out& x)
{
    m_return_ = x.m_return_;
}

Calculator_addition_Out::Calculator_addition_Out(
        Calculator_addition_Out&& x)
{
    m_return_ = x.m_return_;
}

Calculator_addition_Out& Calculator_addition_Out::operator =(
        const Calculator_addition_Out& x)
{

    m_return_ = x.m_return_;

    return *this;
}

Calculator_addition_Out& Calculator_addition_Out::operator =(
        Calculator_addition_Out&& x)
{

    m_return_ = x.m_return_;

    return *this;
}

bool Calculator_addition_Out::operator ==(
        const Calculator_addition_Out& x) const
{

    return (m_return_ == x.m_return_);
}

bool Calculator_addition_Out::operator !=(
        const Calculator_addition_Out& x) const
{
    return !(*this == x);
}

size_t Calculator_addition_Out::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t Calculator_addition_Out::getCdrSerializedSize(
        const Calculator_addition_Out& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void Calculator_addition_Out::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_return_;

}

void Calculator_addition_Out::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_return_;
}

/*
 * @brief This function sets a value in member return_
 * @param _return_ New value for member return_
 */
void Calculator_addition_Out::return_(
        int32_t _return_)
{
    m_return_ = _return_;
}

/*
 * @brief This function returns the value of member return_
 * @return Value of member return_
 */
int32_t Calculator_addition_Out::return_() const
{
    return m_return_;
}

/*
 * @brief This function returns a reference to member return_
 * @return Reference to member return_
 */
int32_t& Calculator_addition_Out::return_()
{
    return m_return_;
}


size_t Calculator_addition_Out::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Calculator_addition_Out::isKeyDefined()
{
    return false;
}

void Calculator_addition_Out::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

Calculator_subtraction_Out::Calculator_subtraction_Out()
{
    // m_return_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4461c7e3
    m_return_ = 0;

}

Calculator_subtraction_Out::~Calculator_subtraction_Out()
{
}

Calculator_subtraction_Out::Calculator_subtraction_Out(
        const Calculator_subtraction_Out& x)
{
    m_return_ = x.m_return_;
}

Calculator_subtraction_Out::Calculator_subtraction_Out(
        Calculator_subtraction_Out&& x)
{
    m_return_ = x.m_return_;
}

Calculator_subtraction_Out& Calculator_subtraction_Out::operator =(
        const Calculator_subtraction_Out& x)
{

    m_return_ = x.m_return_;

    return *this;
}

Calculator_subtraction_Out& Calculator_subtraction_Out::operator =(
        Calculator_subtraction_Out&& x)
{

    m_return_ = x.m_return_;

    return *this;
}

bool Calculator_subtraction_Out::operator ==(
        const Calculator_subtraction_Out& x) const
{

    return (m_return_ == x.m_return_);
}

bool Calculator_subtraction_Out::operator !=(
        const Calculator_subtraction_Out& x) const
{
    return !(*this == x);
}

size_t Calculator_subtraction_Out::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t Calculator_subtraction_Out::getCdrSerializedSize(
        const Calculator_subtraction_Out& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void Calculator_subtraction_Out::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_return_;

}

void Calculator_subtraction_Out::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_return_;
}

/*
 * @brief This function sets a value in member return_
 * @param _return_ New value for member return_
 */
void Calculator_subtraction_Out::return_(
        int32_t _return_)
{
    m_return_ = _return_;
}

/*
 * @brief This function returns the value of member return_
 * @return Value of member return_
 */
int32_t Calculator_subtraction_Out::return_() const
{
    return m_return_;
}

/*
 * @brief This function returns a reference to member return_
 * @return Reference to member return_
 */
int32_t& Calculator_subtraction_Out::return_()
{
    return m_return_;
}


size_t Calculator_subtraction_Out::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Calculator_subtraction_Out::isKeyDefined()
{
    return false;
}

void Calculator_subtraction_Out::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

Calculator_addition_Result::Calculator_addition_Result()
{
    m__d = eprosima::rpc::protocol::REMOTE_EX_OK;
    // m_result com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@75c072cb

}

Calculator_addition_Result::~Calculator_addition_Result()
{
}

Calculator_addition_Result::Calculator_addition_Result(
        const Calculator_addition_Result& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        m_result = x.m_result;
        break;
        default:
        break;
    }
}

Calculator_addition_Result::Calculator_addition_Result(
        Calculator_addition_Result&& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        m_result = std::move(x.m_result);
        break;
        default:
        break;
    }
}

Calculator_addition_Result& Calculator_addition_Result::operator =(
        const Calculator_addition_Result& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        m_result = x.m_result;
        break;
        default:
        break;
    }

    return *this;
}

Calculator_addition_Result& Calculator_addition_Result::operator =(
        Calculator_addition_Result&& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        m_result = std::move(x.m_result);
        break;
        default:
        break;
    }

    return *this;
}

bool Calculator_addition_Result::operator ==(
        const Calculator_addition_Result& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
            return (m_result == x.m_result);
            break;
        default:
        break;
    }
    return false;
}

bool Calculator_addition_Result::operator !=(
        const Calculator_addition_Result& x) const
{
    return !(*this == x);
}

void Calculator_addition_Result::_d(
        int32_t __d)
{
    bool b = false;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        switch(__d)
        {
            case eprosima::rpc::protocol::REMOTE_EX_OK:
            b = true;
            break;
            default:
            break;
        }
        break;
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t Calculator_addition_Result::_d() const
{
    return m__d;
}

int32_t& Calculator_addition_Result::_d()
{
    return m__d;
}

void Calculator_addition_Result::result(
        const Calculator_addition_Out& _result)
{
    m_result = _result;
    m__d = eprosima::rpc::protocol::REMOTE_EX_OK;
}

void Calculator_addition_Result::result(
        Calculator_addition_Out&& _result)
{
    m_result = std::move(_result);
    m__d = eprosima::rpc::protocol::REMOTE_EX_OK;
}

const Calculator_addition_Out& Calculator_addition_Result::result() const
{
    bool b = false;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_result;
}

Calculator_addition_Out& Calculator_addition_Result::result()
{
    bool b = false;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_result;
}

size_t Calculator_addition_Result::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


        reset_alignment = current_alignment;

        reset_alignment += Calculator_addition_Out::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        

    return union_max_size_serialized - initial_alignment;
}

// TODO(Ricardo) Review
size_t Calculator_addition_Result::getCdrSerializedSize(
        const Calculator_addition_Result& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    switch(data.m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        current_alignment += Calculator_addition_Out::getCdrSerializedSize(data.result(), current_alignment);
        break;
        default:
        break;
    }

    return current_alignment - initial_alignment;
}

void Calculator_addition_Result::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        scdr << m_result;

        break;
        default:
        break;
    }
}

void Calculator_addition_Result::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        dcdr >> m_result;
        break;
        default:
        break;
    }
}


Calculator_subtraction_Result::Calculator_subtraction_Result()
{
    m__d = eprosima::rpc::protocol::REMOTE_EX_OK;
    // m_result com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@2ed0fbae

}

Calculator_subtraction_Result::~Calculator_subtraction_Result()
{
}

Calculator_subtraction_Result::Calculator_subtraction_Result(
        const Calculator_subtraction_Result& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        m_result = x.m_result;
        break;
        default:
        break;
    }
}

Calculator_subtraction_Result::Calculator_subtraction_Result(
        Calculator_subtraction_Result&& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        m_result = std::move(x.m_result);
        break;
        default:
        break;
    }
}

Calculator_subtraction_Result& Calculator_subtraction_Result::operator =(
        const Calculator_subtraction_Result& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        m_result = x.m_result;
        break;
        default:
        break;
    }

    return *this;
}

Calculator_subtraction_Result& Calculator_subtraction_Result::operator =(
        Calculator_subtraction_Result&& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        m_result = std::move(x.m_result);
        break;
        default:
        break;
    }

    return *this;
}

bool Calculator_subtraction_Result::operator ==(
        const Calculator_subtraction_Result& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
            return (m_result == x.m_result);
            break;
        default:
        break;
    }
    return false;
}

bool Calculator_subtraction_Result::operator !=(
        const Calculator_subtraction_Result& x) const
{
    return !(*this == x);
}

void Calculator_subtraction_Result::_d(
        int32_t __d)
{
    bool b = false;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        switch(__d)
        {
            case eprosima::rpc::protocol::REMOTE_EX_OK:
            b = true;
            break;
            default:
            break;
        }
        break;
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t Calculator_subtraction_Result::_d() const
{
    return m__d;
}

int32_t& Calculator_subtraction_Result::_d()
{
    return m__d;
}

void Calculator_subtraction_Result::result(
        const Calculator_subtraction_Out& _result)
{
    m_result = _result;
    m__d = eprosima::rpc::protocol::REMOTE_EX_OK;
}

void Calculator_subtraction_Result::result(
        Calculator_subtraction_Out&& _result)
{
    m_result = std::move(_result);
    m__d = eprosima::rpc::protocol::REMOTE_EX_OK;
}

const Calculator_subtraction_Out& Calculator_subtraction_Result::result() const
{
    bool b = false;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_result;
}

Calculator_subtraction_Out& Calculator_subtraction_Result::result()
{
    bool b = false;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_result;
}

size_t Calculator_subtraction_Result::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


        reset_alignment = current_alignment;

        reset_alignment += Calculator_subtraction_Out::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        

    return union_max_size_serialized - initial_alignment;
}

// TODO(Ricardo) Review
size_t Calculator_subtraction_Result::getCdrSerializedSize(
        const Calculator_subtraction_Result& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    switch(data.m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        current_alignment += Calculator_subtraction_Out::getCdrSerializedSize(data.result(), current_alignment);
        break;
        default:
        break;
    }

    return current_alignment - initial_alignment;
}

void Calculator_subtraction_Result::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        scdr << m_result;

        break;
        default:
        break;
    }
}

void Calculator_subtraction_Result::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::REMOTE_EX_OK:
        dcdr >> m_result;
        break;
        default:
        break;
    }
}


Calculator_Call::Calculator_Call()
{
    m__d = 0xCBC6CEAA;
    // m_addition com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@16aa0a0a

    // m_subtraction com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@780cb77

}

Calculator_Call::~Calculator_Call()
{
}

Calculator_Call::Calculator_Call(
        const Calculator_Call& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        m_addition = x.m_addition;
        break;
        case 0xCA019A14:
        m_subtraction = x.m_subtraction;
        break;
        default:
        break;
    }
}

Calculator_Call::Calculator_Call(
        Calculator_Call&& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        m_addition = std::move(x.m_addition);
        break;
        case 0xCA019A14:
        m_subtraction = std::move(x.m_subtraction);
        break;
        default:
        break;
    }
}

Calculator_Call& Calculator_Call::operator =(
        const Calculator_Call& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        m_addition = x.m_addition;
        break;
        case 0xCA019A14:
        m_subtraction = x.m_subtraction;
        break;
        default:
        break;
    }

    return *this;
}

Calculator_Call& Calculator_Call::operator =(
        Calculator_Call&& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        m_addition = std::move(x.m_addition);
        break;
        case 0xCA019A14:
        m_subtraction = std::move(x.m_subtraction);
        break;
        default:
        break;
    }

    return *this;
}

bool Calculator_Call::operator ==(
        const Calculator_Call& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch(m__d)
    {
        case 0xCBC6CEAA:
            return (m_addition == x.m_addition);
            break;
        case 0xCA019A14:
            return (m_subtraction == x.m_subtraction);
            break;
        default:
        break;
    }
    return false;
}

bool Calculator_Call::operator !=(
        const Calculator_Call& x) const
{
    return !(*this == x);
}

void Calculator_Call::_d(
        int32_t __d)
{
    bool b = false;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        switch(__d)
        {
            case 0xCBC6CEAA:
            b = true;
            break;
            default:
            break;
        }
        break;
        case 0xCA019A14:
        switch(__d)
        {
            case 0xCA019A14:
            b = true;
            break;
            default:
            break;
        }
        break;
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t Calculator_Call::_d() const
{
    return m__d;
}

int32_t& Calculator_Call::_d()
{
    return m__d;
}

void Calculator_Call::addition(
        const Calculator_addition_In& _addition)
{
    m_addition = _addition;
    m__d = 0xCBC6CEAA;
}

void Calculator_Call::addition(
        Calculator_addition_In&& _addition)
{
    m_addition = std::move(_addition);
    m__d = 0xCBC6CEAA;
}

const Calculator_addition_In& Calculator_Call::addition() const
{
    bool b = false;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_addition;
}

Calculator_addition_In& Calculator_Call::addition()
{
    bool b = false;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_addition;
}
void Calculator_Call::subtraction(
        const Calculator_subtraction_In& _subtraction)
{
    m_subtraction = _subtraction;
    m__d = 0xCA019A14;
}

void Calculator_Call::subtraction(
        Calculator_subtraction_In&& _subtraction)
{
    m_subtraction = std::move(_subtraction);
    m__d = 0xCA019A14;
}

const Calculator_subtraction_In& Calculator_Call::subtraction() const
{
    bool b = false;

    switch(m__d)
    {
        case 0xCA019A14:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_subtraction;
}

Calculator_subtraction_In& Calculator_Call::subtraction()
{
    bool b = false;

    switch(m__d)
    {
        case 0xCA019A14:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_subtraction;
}

size_t Calculator_Call::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


        reset_alignment = current_alignment;

        reset_alignment += Calculator_addition_In::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        
        reset_alignment = current_alignment;

        reset_alignment += Calculator_subtraction_In::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        

    return union_max_size_serialized - initial_alignment;
}

// TODO(Ricardo) Review
size_t Calculator_Call::getCdrSerializedSize(
        const Calculator_Call& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    switch(data.m__d)
    {
        case 0xCBC6CEAA:
        current_alignment += Calculator_addition_In::getCdrSerializedSize(data.addition(), current_alignment);
        break;
        case 0xCA019A14:
        current_alignment += Calculator_subtraction_In::getCdrSerializedSize(data.subtraction(), current_alignment);
        break;
        default:
        break;
    }

    return current_alignment - initial_alignment;
}

void Calculator_Call::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        scdr << m_addition;

        break;
        case 0xCA019A14:
        scdr << m_subtraction;

        break;
        default:
        break;
    }
}

void Calculator_Call::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        dcdr >> m_addition;
        break;
        case 0xCA019A14:
        dcdr >> m_subtraction;
        break;
        default:
        break;
    }
}


Calculator_Request::Calculator_Request()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@34b7ac2f

    // m_data com.eprosima.idl.parser.typecode.UnionTypeCode@e056f20


}

Calculator_Request::~Calculator_Request()
{


}

Calculator_Request::Calculator_Request(
        const Calculator_Request& x)
{
    m_header = x.m_header;
    m_data = x.m_data;
}

Calculator_Request::Calculator_Request(
        Calculator_Request&& x)
{
    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);
}

Calculator_Request& Calculator_Request::operator =(
        const Calculator_Request& x)
{

    m_header = x.m_header;
    m_data = x.m_data;

    return *this;
}

Calculator_Request& Calculator_Request::operator =(
        Calculator_Request&& x)
{

    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);

    return *this;
}

bool Calculator_Request::operator ==(
        const Calculator_Request& x) const
{

    return (m_header == x.m_header && m_data == x.m_data);
}

bool Calculator_Request::operator !=(
        const Calculator_Request& x) const
{
    return !(*this == x);
}

size_t Calculator_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += eprosima::rpc::protocol::RequestHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += Calculator_Call::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t Calculator_Request::getCdrSerializedSize(
        const Calculator_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += eprosima::rpc::protocol::RequestHeader::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += Calculator_Call::getCdrSerializedSize(data.data(), current_alignment);

    return current_alignment - initial_alignment;
}

void Calculator_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_data;

}

void Calculator_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_data;
}

/*
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void Calculator_Request::header(
        const eprosima::rpc::protocol::RequestHeader& _header)
{
    m_header = _header;
}

/*
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void Calculator_Request::header(
        eprosima::rpc::protocol::RequestHeader&& _header)
{
    m_header = std::move(_header);
}

/*
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::rpc::protocol::RequestHeader& Calculator_Request::header() const
{
    return m_header;
}

/*
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::rpc::protocol::RequestHeader& Calculator_Request::header()
{
    return m_header;
}
/*
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Calculator_Request::data(
        const Calculator_Call& _data)
{
    m_data = _data;
}

/*
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Calculator_Request::data(
        Calculator_Call&& _data)
{
    m_data = std::move(_data);
}

/*
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const Calculator_Call& Calculator_Request::data() const
{
    return m_data;
}

/*
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
Calculator_Call& Calculator_Request::data()
{
    return m_data;
}

size_t Calculator_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Calculator_Request::isKeyDefined()
{
    return false;
}

void Calculator_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

Calculator_Return::Calculator_Return()
{
    m__d = 0;
    // m_addition com.eprosima.idl.parser.typecode.UnionTypeCode@3c407114

    // m_subtraction com.eprosima.idl.parser.typecode.UnionTypeCode@35ef1869

    // m_unknownOp com.eprosima.idl.parser.typecode.AliasTypeCode@c33b74f
    m_unknownOp = 0;
}

Calculator_Return::~Calculator_Return()
{
}

Calculator_Return::Calculator_Return(
        const Calculator_Return& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        m_addition = x.m_addition;
        break;
        case 0xCA019A14:
        m_subtraction = x.m_subtraction;
        break;

        default:
        m_unknownOp = x.m_unknownOp;
        break;
    }
}

Calculator_Return::Calculator_Return(
        Calculator_Return&& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        m_addition = std::move(x.m_addition);
        break;
        case 0xCA019A14:
        m_subtraction = std::move(x.m_subtraction);
        break;

        default:
        m_unknownOp = x.m_unknownOp;
        break;
    }
}

Calculator_Return& Calculator_Return::operator =(
        const Calculator_Return& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        m_addition = x.m_addition;
        break;
        case 0xCA019A14:
        m_subtraction = x.m_subtraction;
        break;

        default:
        m_unknownOp = x.m_unknownOp;
        break;
    }

    return *this;
}

Calculator_Return& Calculator_Return::operator =(
        Calculator_Return&& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        m_addition = std::move(x.m_addition);
        break;
        case 0xCA019A14:
        m_subtraction = std::move(x.m_subtraction);
        break;

        default:
        m_unknownOp = x.m_unknownOp;
        break;
    }

    return *this;
}

bool Calculator_Return::operator ==(
        const Calculator_Return& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch(m__d)
    {
        case 0xCBC6CEAA:
            return (m_addition == x.m_addition);
            break;
        case 0xCA019A14:
            return (m_subtraction == x.m_subtraction);
            break;

        default:
        return m_unknownOp == x.m_unknownOp;
        break;
    }
    return false;
}

bool Calculator_Return::operator !=(
        const Calculator_Return& x) const
{
    return !(*this == x);
}

void Calculator_Return::_d(
        int32_t __d)
{
    bool b = false;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        switch(__d)
        {
            case 0xCBC6CEAA:
            b = true;
            break;
            default:
            break;
        }
        break;
        case 0xCA019A14:
        switch(__d)
        {
            case 0xCA019A14:
            b = true;
            break;
            default:
            break;
        }
        break;
        default:
        b = true;
        switch(__d)
        {
            case 0xCBC6CEAA:
            case 0xCA019A14:
            b = false;
            break;
            default:
            break;
        }
        break;
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t Calculator_Return::_d() const
{
    return m__d;
}

int32_t& Calculator_Return::_d()
{
    return m__d;
}

void Calculator_Return::addition(
        const Calculator_addition_Result& _addition)
{
    m_addition = _addition;
    m__d = 0xCBC6CEAA;
}

void Calculator_Return::addition(
        Calculator_addition_Result&& _addition)
{
    m_addition = std::move(_addition);
    m__d = 0xCBC6CEAA;
}

const Calculator_addition_Result& Calculator_Return::addition() const
{
    bool b = false;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_addition;
}

Calculator_addition_Result& Calculator_Return::addition()
{
    bool b = false;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_addition;
}
void Calculator_Return::subtraction(
        const Calculator_subtraction_Result& _subtraction)
{
    m_subtraction = _subtraction;
    m__d = 0xCA019A14;
}

void Calculator_Return::subtraction(
        Calculator_subtraction_Result&& _subtraction)
{
    m_subtraction = std::move(_subtraction);
    m__d = 0xCA019A14;
}

const Calculator_subtraction_Result& Calculator_Return::subtraction() const
{
    bool b = false;

    switch(m__d)
    {
        case 0xCA019A14:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_subtraction;
}

Calculator_subtraction_Result& Calculator_Return::subtraction()
{
    bool b = false;

    switch(m__d)
    {
        case 0xCA019A14:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_subtraction;
}
void Calculator_Return::unknownOp(
        eprosima::rpc::protocol::UnknownOperation _unknownOp)
{
    m_unknownOp = _unknownOp;
    m__d = 0;
}

eprosima::rpc::protocol::UnknownOperation Calculator_Return::unknownOp() const
{
    bool b = true;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        case 0xCA019A14:
        b = false;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_unknownOp;
}

eprosima::rpc::protocol::UnknownOperation& Calculator_Return::unknownOp()
{
    bool b = true;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        case 0xCA019A14:
        b = false;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_unknownOp;
}

size_t Calculator_Return::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


        reset_alignment = current_alignment;

        reset_alignment += Calculator_addition_Result::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        
        reset_alignment = current_alignment;

        reset_alignment += Calculator_subtraction_Result::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        
        reset_alignment = current_alignment;

        reset_alignment += 1 + eprosima::fastcdr::Cdr::alignment(reset_alignment, 1);


        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        

    return union_max_size_serialized - initial_alignment;
}

// TODO(Ricardo) Review
size_t Calculator_Return::getCdrSerializedSize(
        const Calculator_Return& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    switch(data.m__d)
    {
        case 0xCBC6CEAA:
        current_alignment += Calculator_addition_Result::getCdrSerializedSize(data.addition(), current_alignment);
        break;
        case 0xCA019A14:
        current_alignment += Calculator_subtraction_Result::getCdrSerializedSize(data.subtraction(), current_alignment);
        break;

        default:
        current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

        break;
    }

    return current_alignment - initial_alignment;
}

void Calculator_Return::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        scdr << m_addition;

        break;
        case 0xCA019A14:
        scdr << m_subtraction;

        break;

        default:
        scdr << m_unknownOp;

        break;
    }
}

void Calculator_Return::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case 0xCBC6CEAA:
        dcdr >> m_addition;
        break;
        case 0xCA019A14:
        dcdr >> m_subtraction;
        break;

        default:
        dcdr >> m_unknownOp;
        break;
    }
}


Calculator_Reply::Calculator_Reply()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1ea9f6af

    // m_data com.eprosima.idl.parser.typecode.UnionTypeCode@6a192cfe


}

Calculator_Reply::~Calculator_Reply()
{


}

Calculator_Reply::Calculator_Reply(
        const Calculator_Reply& x)
{
    m_header = x.m_header;
    m_data = x.m_data;
}

Calculator_Reply::Calculator_Reply(
        Calculator_Reply&& x)
{
    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);
}

Calculator_Reply& Calculator_Reply::operator =(
        const Calculator_Reply& x)
{

    m_header = x.m_header;
    m_data = x.m_data;

    return *this;
}

Calculator_Reply& Calculator_Reply::operator =(
        Calculator_Reply&& x)
{

    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);

    return *this;
}

bool Calculator_Reply::operator ==(
        const Calculator_Reply& x) const
{

    return (m_header == x.m_header && m_data == x.m_data);
}

bool Calculator_Reply::operator !=(
        const Calculator_Reply& x) const
{
    return !(*this == x);
}

size_t Calculator_Reply::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += eprosima::rpc::protocol::ReplyHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += Calculator_Return::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t Calculator_Reply::getCdrSerializedSize(
        const Calculator_Reply& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += eprosima::rpc::protocol::ReplyHeader::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += Calculator_Return::getCdrSerializedSize(data.data(), current_alignment);

    return current_alignment - initial_alignment;
}

void Calculator_Reply::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_data;

}

void Calculator_Reply::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_data;
}

/*
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void Calculator_Reply::header(
        const eprosima::rpc::protocol::ReplyHeader& _header)
{
    m_header = _header;
}

/*
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void Calculator_Reply::header(
        eprosima::rpc::protocol::ReplyHeader&& _header)
{
    m_header = std::move(_header);
}

/*
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::rpc::protocol::ReplyHeader& Calculator_Reply::header() const
{
    return m_header;
}

/*
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::rpc::protocol::ReplyHeader& Calculator_Reply::header()
{
    return m_header;
}
/*
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Calculator_Reply::data(
        const Calculator_Return& _data)
{
    m_data = _data;
}

/*
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Calculator_Reply::data(
        Calculator_Return&& _data)
{
    m_data = std::move(_data);
}

/*
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const Calculator_Return& Calculator_Reply::data() const
{
    return m_data;
}

/*
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
Calculator_Return& Calculator_Reply::data()
{
    return m_data;
}

size_t Calculator_Reply::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Calculator_Reply::isKeyDefined()
{
    return false;
}

void Calculator_Reply::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
